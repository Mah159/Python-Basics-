# -*- coding: utf-8 -*-
"""MaheenSalmanPythonAssignment2 _Cohort4Orange.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rtQBgPdvF7bZKmf6SxMZ2P_BIMCix59n

**Task 1: Guessing Game**

The game will have the
following rules:
1. The program will generate a random number between 1 and 50 and store it in a variable
called &quot;secret_number.&quot; For this, you will need to import randint() from the random library
in python. Run the following line of code in a cell:
from random import randint

2. The user will be given 5 attempts to guess the &quot;secret_number.&quot;
3. The program will use a while loop to repeatedly ask the user for their guess and provide
feedback based on their input. (Remember that input() returns a string even if the user
enters a number.)
4. First, handle the case where the user enters a non-numeric input. For this, you will need to
add a try/except block. Google the syntax and under the try block, convert the guess into an
int. If the entry is non-numeric, this conversion should fail and python will go to the except
block. Under the except block, handle this error by printing &quot;Invalid input! Please enter a
valid number” and utilize the continue statement to allow the user to try again without
reducing their remaining attempts.
5. If the user guesses the correct number, print &quot;Congratulations! You guessed the secret
number [secret_number] correctly!&quot; and break out of the loop.
6. If the user&#39;s guess is too high, print &quot;Try again! Your guess is too high. You have
[attempts_left] attempts left.&quot; where &quot;attempts_left&quot; is the number of remaining attempts.
7. If the user&#39;s guess is too low, print &quot;Try again! Your guess is too low. You have
[attempts_left] attempts left.&quot;
8. If the user runs out of attempts, print &quot;Game Over! The secret number was [secret_number].
Better luck next time!&quot; and break out of the loop.
"""

from random import randint #Importing the randint function from the random module

secret_number = randint(1, 50) #generating a random secret number between 1 and 50

attempts_left = 5 #initializing the number of attempts left

print("--- Welcome to the Guessing Game!---") #displaying a welcome message
print(f"Secret number is {secret_number}") #revealing the secret number for debugging using f string

while attempts_left > 0: #initialzing a while loop that continues until there are no attempts left
    try:
        guess = int(input(f"Guess the secret number (1-50). You have {attempts_left} attempts left: ")) #getting the user's guess as an integer
    except ValueError:

        print("Invalid input! Please enter a valid number.") #for string inputs from the user this message will be printed
        continue

    if guess == secret_number:
        print(f"Congratulations! You guessed the secret number {secret_number} correctly!")  #displaying this message using f string the user if the guess is correct and exiting the loop
        break
    elif guess > secret_number:
        print(f"Try again! Your guess is too high.") #if the guess is higher than secret number this will be displayed
    else:
        print(f"Try again! Your guess is too low.") #if the guess is smaller than secret number this will be displayed

    attempts_left -= 1 #decrement the number of attempts by 1

if attempts_left == 0:
    print(f"Game Over! The secret number was {secret_number}. Better luck next time!") #once user runs out of attempts display this

"""**Task 2 a): Calculating Vowels in a sentence**

Write a function called num_vowels that takes in a string as an argument, and returns the
number of vowels in that string. Print out the result for the string “Learning Python is fun
and engaging.”
"""

def num_vowels(str):#defining function num_vowels to input and check a string str

 i = 0 #initializing variable i to check number of vowels in the string
 str = "Learning Python is fun and engaging" #string is initialized as the desired sentence for which vowels have to be checked
 vowels = "aeiou" + "AEIOU" #defining vowels in both upper and lower case

 for letters in str: #for loop is defined to check the string defined above
   if letters in vowels:
     i +=1 #if statement and for loop will keep running till all the vowels are checked
 return i #The number of vowels are stored in i and returned here


num_vowels(str) #considering the string defined above

"""**Task 2 b): Converting Hours to Minutes**

Create a function called hours_to_min that converts hours into minutes. The function
should take the number of hours as input and return the equivalent number of minutes.
Test the function with 2.5 hours and print the result.
"""

def hours_to_min(hours): #defining function with the name hours_to_min with hours as an argument or input
 minutes = hours * 60 #using formula to convert hours to minutes by multiplying hours with 60 as there are 60 minutes in an hour.
 return minutes #returning minutes result

hours_to_min(2.5) #considering hours to be 2.5

"""**Task 2 c): Printing Table of a number**

Write a python function that takes in a number as an argument, and prints out the table of
that number up to 12 times that number. You may name this whatever you wish.
"""

def table(num):
    print("The Table of", num, "is: ")
    for i in range(1, 13):
        print(f"{i} x {num} = {i * num}")

table(2)

"""**Task 2 d): Checking Eligibility for Admission**

The function should take two
arguments: the student&#39;s age and their previous GPA. The eligibility criteria are as follows:
- The student must be at least 18 years old.
- The student&#39;s previous GPA must be 3.0 or higher on a scale of 4.0.
The function should return True if the student meets both criteria, otherwise, return False.
Test the function with different ages and GPAs with and without keywords for example:
eligibility(30, 3.2) [will depend on which order you provided the positional arguments in the
definition]
eligibility(GPA = 2.9, age = 40)
"""

def eligibility(gpa, age): #defining function eligibilty to take two arguments gpa and age

  if age >= 18: #considering an if condition of age being at least 18
   if 3.0 < gpa < 4.0: #defining a nested if with GPA between 3.0 to 4.0 for eligibility
    return "You are eligible for admission in university" #if both nested if conditions are met, this will be returned

  else:
    return "You are not eligible for admission in university" #if any condition of the ifs is not met, this will be returned
age = float((input("Kindly enter your age: "))) #Age input taken from the user, age is an integer but it is kept as float in this case as the arguments of a function must be of the same type
gpa = float((input("Kindly enter your GPA: "))) #GPA input taken from the user, kept as float

eligibility(gpa ,age)